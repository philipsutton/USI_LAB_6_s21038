name: Java CI with Maven

on: [ push ]

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-output-step.outputs.version-output }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Calculate version
        shell: bash
        run: |
          function calculate_version {
            MAJOR_NUM=$(echo $2 | cut -d. -f1)
            MINOR_NUM=$(echo $2 | cut -d. -f2)
            PATCH_NUM=$(echo $2 | cut -d. -f3 | cut -d- -f1)

            NEW_MAJOR_NUM=$MAJOR_NUM
            NEW_MINOR_NUM=$MINOR_NUM
            NEW_PATCH_NUM=$PATCH_NUM

            if [ "${1,,}" = major ] ; then
              let NEW_MAJOR_NUM=$MAJOR_NUM+1
              NEW_MINOR_NUM=0
              NEW_PATCH_NUM=0
            elif [ "${1,,}" = minor ] ; then
              let NEW_MINOR_NUM=$MINOR_NUM+1
              NEW_PATCH_NUM=0
            elif [ "${1,,}" = patch ] ; then
              let NEW_PATCH_NUM=$PATCH_NUM+1
            fi

            echo $NEW_MAJOR_NUM.$NEW_MINOR_NUM.$NEW_PATCH_NUM
          }

          function calculate_build_version {
            MAJOR_NUM=$(echo $1 | cut -d. -f1)
            MINOR_NUM=$(echo $1 | cut -d. -f2)
            PATCH_NUM=$(echo $1 | cut -d. -f3)

            let NEW_MINOR_NUM=$MINOR_NUM+1

            echo $MAJOR_NUM.$NEW_MINOR_NUM.$PATCH_NUM-build.$(git rev-parse --short HEAD)
          }

          set +e
          PREV_VERSION=$(git tag | grep -E '.*[^hotfix]$' | tail -n 1)
          set -e

          if [ -z $PREV_VERSION ] ; then
            PREV_VERSION=0.0.0
          fi

          export HOTFIX="$(echo $GITHUB_REF_NAME | sed -n "s/^hotfix\/\([0-9.]*\).*/\1/p")"
          if [ $HOTFIX ] || [ "${RELEASE,,}" == patch ] ; then
            export PREV_VERSION=$HOTFIX
          fi

          if [ "${RELEASE,,}" = major ] || [ "${RELEASE,,}" = minor ] || [ "${RELEASE,,}" = patch ] ; then
            export RELEASE_VERSION=$(calculate_version $RELEASE $PREV_VERSION)
          else
            export RELEASE_VERSION=$(calculate_build_version $PREV_VERSION)
          fi

          echo $RELEASE_VERSION > version.txt
      - id: version-output-step
        run: echo "::set-output name=version-output::$(cat version.txt)"
  build:
    runs-on: ubuntu-latest
    needs: calculate-version
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        continue-on-error: true
        with:
          project: 'test-app'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --failOnCVSS 7
            --enableRetired
      - name: Upload Depcheck results
        uses: actions/upload-artifact@v2
        with:
          name: Depcheck report
          path: ${{github.workspace}}/reports
      - name: Set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: '16'
          distribution: 'temurin'
          cache: maven
      - name: Building version
        run: echo ${{ needs.calculate-version.outputs.version }}
      - run: sed -i -e "s/<version>local<\/version>/<version>${{ needs.calculate-version.outputs.version }}<\/version>/" pom.xml
      - name: Build with Maven
        run: mvn verify
      - name: Upload JAR file
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: target/*.jar
          retention-days: 10
      - name: Generate SBOM for JAR
        uses: anchore/sbom-action@v0
        with:
          artifact_path: target/*.jar
          format: spdx-json
          output_file: sbom-jdk11.json
      - name: Generate SBOM for Docker image
        uses: anchore/sbom-action@v0
        with:
          artifact_path: ${{ github.workspace }}/Dockerfile
          format: spdx-json
